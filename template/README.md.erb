# <%= @module_name %>

## Tech stack

*   [**Flame** framework](https://github.com/AlexWayfer/flame)
*   [**Sequel** ORM](https://sequel.jeremyevans.net/)
*   [**Puma** web-server](https://puma.io/)

-----

## Deployment

1.  Install PostgreSQL version `11`
2.  Database setup
    1.  Create project user:
        `createuser -U postgres <%= @app_name %>`
        (with `-P` for network-open databases)
    2.  Create project database:
        `createdb -U postgres <%= @app_name %> -O <%= @app_name %>`
    3.  Enable required extensions (like `citext` or `pgcrypto`), like:
        `psql -U postgres -c "CREATE EXTENSION citext" <%= @app_name %>`
3.  Install [`rbenv`](https://github.com/rbenv/rbenv)
4.  Install [`nodenv`](https://github.com/nodenv/nodenv)
5.  Install [Yarn version 1](https://classic.yarnpkg.com/)
6.  Clone this repository and checkout to directory
7.  Set the [`EDITOR` environment variable][1] (`nano`, `vim`, `mcedit`, etc.)
8.  Run `exe/setup.sh` to install Ruby (with gems), Node (with modules),
    fill configs and run database migrations

[1]: https://en.wikibooks.org/wiki/Guide_to_Unix/Environment_Variables#EDITOR

### Production (optional)

*   Tune PostgreSQL (via [pgtune](https://pgtune.leopard.in.ua/), for example)
*   Set correct timezone
*   Add UNIX-user for project: `adduser <%= @app_name %>`
*   Make symbolic link of project directory to `/var/www/<%= @app_name %>`
*   Install and configure `nginx` (with symbolic links from `config/nginx`)
*   Install `letsencrypt` and generate certificates
    *   Including `openssl dhparam -out /etc/ssl/certs/dhparam.pem 4096`
*   Install `traceroute` (or `traceroute6`) for debug information
    in network errors reports

-----

## Tools

### Server management

For management server state use `./server` tool (it has usage help).

`./server devel` is useful on development environment, because application
is restarting on code (or configs) changes.

### Ruby console

Realized with [`pry`](https://github.com/pry/pry):

```shell
toys console
```

(All models and other classes are available)

### PostgreSQL console

```shell
toys psql
```

(For login as `postgres` user use `sudo su - postgres`)

-----

## Database migrations

### Run migrations

To latest:

```shell
toys db migrate
```

To specific version (forward or backward):

```shell
toys db migrate --target=part_of_target_migration_name_or_version
```

### Create migration

```shell
toys db migrations new migration_name
```

-----

## Update server

### Locally

```shell
exe/update.sh
```

It will update `master` branch, update `bundle`,
stop `server`, run `migrations` and start `server`.

### Remotely

```shell
toys deploy
```

It will run [`exe/update.sh` command](#locally) remotely
through `ssh` connection from `deploy.yml` configuration file.
