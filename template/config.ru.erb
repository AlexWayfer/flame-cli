# frozen_string_literal: true

require_relative 'constants'

environment = ENV['RACK_ENV'].to_sym

is_development = environment == :development

## Require gems
require 'bundler/setup'
Bundler.require(
	:system, :server, :database,
	:translations, :forms, :views, :assets, :mails, :others,
	environment
)

require 'erubi/capture_end'
# require 'voight_kampff/rack_request'

## Require libs

### For $RS constant:
### http://ruby-doc.org/stdlib/libdoc/English/rdoc/English.html
require 'English'

require 'logger'

### For PP.pp (differs from `pp` by arguments (width))
require 'pp'

# require 'money/bank/google_currency'

## Require application
require_relative 'application'

## Require dirs
<%= @short_module_name %>::Application.require_dirs <%= @short_module_name %>::APP_DIRS, ignore: [%r{lib/\w+/spec/}]

## Require routes
require_relative 'routes'

## Use session middleware
if <%= @short_module_name %>::Application.config[:session]
	use Rack::Session::Cookie, <%= @short_module_name %>::Application.config[:session][:cookie]
end

## Middleware for exceptions about too large cookies
use Rack::Protection::MaximumCookie

## Access Logger
use Rack::CommonLogger, <%= @short_module_name %>::Application.logger

## Aliases for rack-console
if ENV['RACK_CONSOLE']
	# <%= @short_module_name %>::Acc = <%= @short_module_name %>::Account
end

## Remove invalid UTF-8 characters from requests
use Rack::UTF8Sanitizer

## Remove trailing slashes from request path (and redirect)
# use Rack::RemoveTrailingSlashes

## Parse body as pointed out in Content-type
use Rack::PostBodyContentTypeParser

## CSRF
## Rescued and reported by `lowlevel_error_handler` in Puma config
use Rack::Csrf, raise: true

## Run application
run <%= @short_module_name %>::Application
