# frozen_string_literal: true

require 'yaml'

module <%= @module_name %>
	::<%= @short_module_name %> = ::<%= @module_name %>

	APP_DIRS = [
		'lib',
		'config',
		'models',
		# 'policies',
		'helpers',
		'mailers',
		# 'actions',
		'forms',
		# 'view_objects',
		'controllers'
	].freeze

	module Config
		## Class for config like a Hash with helper methods.
		## It was a part of the Flame, but some places, like Puma config,
		## need for this without Bundler (dependecies):
		## https://github.com/puma/puma/issues/2319
		class Base < Hash
			## Create an instance of application config
			def initialize
				populate_dirs

				self[:stdout_file] = "#{self[:logs_dir]}/out"
				self[:stderr_file] = "#{self[:logs_dir]}/err"

				require_relative 'processors/server'
				Processors::Server.new self

				%i[session site].each do |config_name|
					load_yaml config_name, required: true
				end
			end

			## Method for loading YAML-files from config directory
			## @param name [Symbol]
			##   file base name (extension is `.yml` or '.yaml')
			## @example Load SMTP file without extension, by Symbol
			##   config.load_yaml(:smtp)
			def load_yaml(name, required: false)
				file_name = "#{name}.y{a,}ml"

				file_path = find_config_file file_name, required: required

				return unless file_path

				self[name] = YAML.load_file(file_path)
			end

			private

			def populate_dirs
				self[:root_dir] = File.realpath "#{__dir__}/.."

				%i[config logs public tmp views].each do |dir_name|
					self[:"#{dir_name}_dir"] = "#{self[:root_dir]}/#{dir_name}"
				end

				self[:pids_dir] = "#{self[:tmp_dir]}/pids"
			end

			def find_config_file(file_name, required:)
				file_path = nil

				loop do
					file_path = Dir[File.join(self[:config_dir], file_name)].first
					break if file_path

					config_relative_dir = self[:config_dir].sub(self[:root_dir], '')
					puts "Config file '#{file_name}' not found in '#{config_relative_dir}'"

					next if ask_to_check_config_files

					required ? abort : break
				end

				file_path
			end

			def ask_to_check_config_files
				highline.choose do |menu|
					menu.layout = :one_line

					menu.prompt = 'Do you want to check config files? '

					menu.choice(:yes) do
						system 'toys config check'
						true
					end

					menu.choice(:no) { false }
				end
			end

			def highline
				@highline ||= begin
					require 'highline'
					HighLine.new
				end
			end
		end
	end
end
