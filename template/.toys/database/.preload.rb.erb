# frozen_string_literal: true

def db_config
	return @db_config if defined?(@db_config)

	require_application_config

	@db_config = <%= @short_module_name %>::Application.config[:database]
end

def db_connection
	return @db_connection if defined?(@db_connection)

	require_application_config

	@db_connection = <%= @short_module_name %>::Application.db_connection
end

def db_access
	@db_access ||=
		{ '-U' => db_config[:user], '-h' => db_config[:host] }
			.compact.map { |key, value| "#{key} #{value}" }.join(' ')
end

def pgpass_line
	@pgpass_line ||=
		db_config
			.fetch_values(:host, :port, :database, :user, :password) { |_key| '*' }
			.join(':')
end

## Constants for DB

DB_DIR = File.join(ROOT_DIR, 'db')
DB_MIGRATIONS_DIR = File.join(DB_DIR, 'migrations')
DB_DUMPS_DIR = File.join(DB_DIR, 'dumps')

PGPASS_FILE = File.expand_path '~/.pgpass'

DB_EXTENSIONS = %w[citext pgcrypto].freeze

def update_pgpass
	pgpass_lines =
		File.exist?(PGPASS_FILE) ? File.read(PGPASS_FILE).split($RS) : []

	return if pgpass_lines&.include? pgpass_line

	File.write PGPASS_FILE, pgpass_lines.push(pgpass_line, nil).join($RS)
	File.chmod(0o600, PGPASS_FILE)
end

# db_connection.loggers << Logger.new($stdout)
